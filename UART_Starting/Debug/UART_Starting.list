
UART_Starting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000d0c  08000d0c  00010d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d24  08000d24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d24  08000d24  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d24  08000d24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d24  08000d24  00010d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d28  08000d28  00010d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08000d38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000d38  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d8c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010af  00000000  00000000  00024dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000578  00000000  00000000  00025e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  000263e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000150f3  00000000  00000000  00026908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a30  00000000  00000000  0003b9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007deb5  00000000  00000000  0004142b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bf2e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001530  00000000  00000000  000bf334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000cf4 	.word	0x08000cf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000cf4 	.word	0x08000cf4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
void UART_Init();

UART_HandleTypeDef uart;


int main(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

	HAL_Init();
 8000162:	f000 f8d7 	bl	8000314 <HAL_Init>
	SystemClockConfig();
 8000166:	f000 f815 	bl	8000194 <SystemClockConfig>
	UART_Init();
 800016a:	f000 f819 	bl	80001a0 <UART_Init>
	char *msg =  "Hi how are you";
 800016e:	4b07      	ldr	r3, [pc, #28]	; (800018c <main+0x30>)
 8000170:	607b      	str	r3, [r7, #4]
	uint16_t len = strlen(msg);
 8000172:	6878      	ldr	r0, [r7, #4]
 8000174:	f7ff ffea 	bl	800014c <strlen>
 8000178:	4603      	mov	r3, r0
 800017a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&uart, (uint8_t*)msg,len, HAL_MAX_DELAY);
 800017c:	887a      	ldrh	r2, [r7, #2]
 800017e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000182:	6879      	ldr	r1, [r7, #4]
 8000184:	4802      	ldr	r0, [pc, #8]	; (8000190 <main+0x34>)
 8000186:	f000 fc26 	bl	80009d6 <HAL_UART_Transmit>
	while(1);
 800018a:	e7fe      	b.n	800018a <main+0x2e>
 800018c:	08000d0c 	.word	0x08000d0c
 8000190:	20000028 	.word	0x20000028

08000194 <SystemClockConfig>:

}


void SystemClockConfig(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <UART_Init>:

void UART_Init(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	uart.Instance = USART2;
 80001a4:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <UART_Init+0x44>)
 80001a6:	4a10      	ldr	r2, [pc, #64]	; (80001e8 <UART_Init+0x48>)
 80001a8:	601a      	str	r2, [r3, #0]
	uart.Init.BaudRate = 115200;
 80001aa:	4b0e      	ldr	r3, [pc, #56]	; (80001e4 <UART_Init+0x44>)
 80001ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80001b0:	605a      	str	r2, [r3, #4]
	uart.Init.WordLength = UART_WORDLENGTH_8B;
 80001b2:	4b0c      	ldr	r3, [pc, #48]	; (80001e4 <UART_Init+0x44>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	609a      	str	r2, [r3, #8]
	uart.Init.StopBits = UART_STOPBITS_1;
 80001b8:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <UART_Init+0x44>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	60da      	str	r2, [r3, #12]
	uart.Init.Parity = UART_PARITY_NONE;
 80001be:	4b09      	ldr	r3, [pc, #36]	; (80001e4 <UART_Init+0x44>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	611a      	str	r2, [r3, #16]
	uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80001c4:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <UART_Init+0x44>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	619a      	str	r2, [r3, #24]
	uart.Init.Mode = UART_MODE_TX_RX;
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <UART_Init+0x44>)
 80001cc:	220c      	movs	r2, #12
 80001ce:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&uart) != HAL_OK){
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <UART_Init+0x44>)
 80001d2:	f000 fbb3 	bl	800093c <HAL_UART_Init>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <UART_Init+0x40>
		Error_Handler();
 80001dc:	f000 f806 	bl	80001ec <Error_Handler>
	}
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000028 	.word	0x20000028
 80001e8:	40004400 	.word	0x40004400

080001ec <Error_Handler>:


void Error_Handler(){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	while(1);
 80001f0:	e7fe      	b.n	80001f0 <Error_Handler+0x4>
	...

080001f4 <HAL_MspInit>:


#include "stm32f1xx_hal.h"

void HAL_MspInit(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f8:	2003      	movs	r0, #3
 80001fa:	f000 f9a7 	bl	800054c <HAL_NVIC_SetPriorityGrouping>
    SCB->HFSR |= 0x7 << 16;
 80001fe:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <HAL_MspInit+0x40>)
 8000200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000202:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <HAL_MspInit+0x40>)
 8000204:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000208:	62d3      	str	r3, [r2, #44]	; 0x2c
    HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800020a:	2200      	movs	r2, #0
 800020c:	2100      	movs	r1, #0
 800020e:	f06f 000b 	mvn.w	r0, #11
 8000212:	f000 f9a6 	bl	8000562 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000216:	2200      	movs	r2, #0
 8000218:	2100      	movs	r1, #0
 800021a:	f06f 000a 	mvn.w	r0, #10
 800021e:	f000 f9a0 	bl	8000562 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000222:	2200      	movs	r2, #0
 8000224:	2100      	movs	r1, #0
 8000226:	f06f 0009 	mvn.w	r0, #9
 800022a:	f000 f99a 	bl	8000562 <HAL_NVIC_SetPriority>

}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00

08000238 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b088      	sub	sp, #32
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]

  //Enable the clock for UART peripheral
  __HAL_RCC_USART2_CLK_ENABLE();
 8000240:	4b1c      	ldr	r3, [pc, #112]	; (80002b4 <HAL_UART_MspInit+0x7c>)
 8000242:	69db      	ldr	r3, [r3, #28]
 8000244:	4a1b      	ldr	r2, [pc, #108]	; (80002b4 <HAL_UART_MspInit+0x7c>)
 8000246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800024a:	61d3      	str	r3, [r2, #28]
 800024c:	4b19      	ldr	r3, [pc, #100]	; (80002b4 <HAL_UART_MspInit+0x7c>)
 800024e:	69db      	ldr	r3, [r3, #28]
 8000250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000258:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <HAL_UART_MspInit+0x7c>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a15      	ldr	r2, [pc, #84]	; (80002b4 <HAL_UART_MspInit+0x7c>)
 800025e:	f043 0304 	orr.w	r3, r3, #4
 8000262:	6193      	str	r3, [r2, #24]
 8000264:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <HAL_UART_MspInit+0x7c>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	f003 0304 	and.w	r3, r3, #4
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	68bb      	ldr	r3, [r7, #8]

  //Do the Pin Muxing Configuration
  GPIO_InitTypeDef gpio_uart;
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000270:	2302      	movs	r3, #2
 8000272:	617b      	str	r3, [r7, #20]
  gpio_uart.Pin = GPIO_PIN_2;
 8000274:	2304      	movs	r3, #4
 8000276:	613b      	str	r3, [r7, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 8000278:	2301      	movs	r3, #1
 800027a:	61bb      	str	r3, [r7, #24]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800027c:	2302      	movs	r3, #2
 800027e:	61fb      	str	r3, [r7, #28]

  //gpio_uart.
  HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000280:	f107 0310 	add.w	r3, r7, #16
 8000284:	4619      	mov	r1, r3
 8000286:	480c      	ldr	r0, [pc, #48]	; (80002b8 <HAL_UART_MspInit+0x80>)
 8000288:	f000 f9a2 	bl	80005d0 <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3;
 800028c:	2308      	movs	r3, #8
 800028e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000290:	f107 0310 	add.w	r3, r7, #16
 8000294:	4619      	mov	r1, r3
 8000296:	4808      	ldr	r0, [pc, #32]	; (80002b8 <HAL_UART_MspInit+0x80>)
 8000298:	f000 f99a 	bl	80005d0 <HAL_GPIO_Init>
  //Set the NVIC ( IRQ - Setting )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800029c:	2026      	movs	r0, #38	; 0x26
 800029e:	f000 f97c 	bl	800059a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80002a2:	2200      	movs	r2, #0
 80002a4:	210f      	movs	r1, #15
 80002a6:	2026      	movs	r0, #38	; 0x26
 80002a8:	f000 f95b 	bl	8000562 <HAL_NVIC_SetPriority>

}
 80002ac:	bf00      	nop
 80002ae:	3720      	adds	r7, #32
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40021000 	.word	0x40021000
 80002b8:	40010800 	.word	0x40010800

080002bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002ca:	490d      	ldr	r1, [pc, #52]	; (8000300 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002cc:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002e0:	4c0a      	ldr	r4, [pc, #40]	; (800030c <LoopFillZerobss+0x22>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002ee:	f7ff ffe5 	bl	80002bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002f2:	f000 fcdb 	bl	8000cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ff31 	bl	800015c <main>
  bx lr
 80002fa:	4770      	bx	lr
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000304:	08000d2c 	.word	0x08000d2c
  ldr r2, =_sbss
 8000308:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800030c:	20000070 	.word	0x20000070

08000310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC1_2_IRQHandler>
	...

08000314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <HAL_Init+0x28>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <HAL_Init+0x28>)
 800031e:	f043 0310 	orr.w	r3, r3, #16
 8000322:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000324:	2003      	movs	r0, #3
 8000326:	f000 f911 	bl	800054c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800032a:	200f      	movs	r0, #15
 800032c:	f000 f808 	bl	8000340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000330:	f7ff ff60 	bl	80001f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000334:	2300      	movs	r3, #0
}
 8000336:	4618      	mov	r0, r3
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40022000 	.word	0x40022000

08000340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <HAL_InitTick+0x54>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <HAL_InitTick+0x58>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	4619      	mov	r1, r3
 8000352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000356:	fbb3 f3f1 	udiv	r3, r3, r1
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f929 	bl	80005b6 <HAL_SYSTICK_Config>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800036a:	2301      	movs	r3, #1
 800036c:	e00e      	b.n	800038c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2b0f      	cmp	r3, #15
 8000372:	d80a      	bhi.n	800038a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000374:	2200      	movs	r2, #0
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800037c:	f000 f8f1 	bl	8000562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000380:	4a06      	ldr	r2, [pc, #24]	; (800039c <HAL_InitTick+0x5c>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000386:	2300      	movs	r3, #0
 8000388:	e000      	b.n	800038c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800038a:	2301      	movs	r3, #1
}
 800038c:	4618      	mov	r0, r3
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000000 	.word	0x20000000
 8000398:	20000008 	.word	0x20000008
 800039c:	20000004 	.word	0x20000004

080003a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  return uwTick;
 80003a4:	4b02      	ldr	r3, [pc, #8]	; (80003b0 <HAL_GetTick+0x10>)
 80003a6:	681b      	ldr	r3, [r3, #0]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	2000006c 	.word	0x2000006c

080003b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f003 0307 	and.w	r3, r3, #7
 80003c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <__NVIC_SetPriorityGrouping+0x44>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003ca:	68ba      	ldr	r2, [r7, #8]
 80003cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003d0:	4013      	ands	r3, r2
 80003d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003e6:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <__NVIC_SetPriorityGrouping+0x44>)
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	60d3      	str	r3, [r2, #12]
}
 80003ec:	bf00      	nop
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000ed00 	.word	0xe000ed00

080003fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <__NVIC_GetPriorityGrouping+0x18>)
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	0a1b      	lsrs	r3, r3, #8
 8000406:	f003 0307 	and.w	r3, r3, #7
}
 800040a:	4618      	mov	r0, r3
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000ed00 	.word	0xe000ed00

08000418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000426:	2b00      	cmp	r3, #0
 8000428:	db0b      	blt.n	8000442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	f003 021f 	and.w	r2, r3, #31
 8000430:	4906      	ldr	r1, [pc, #24]	; (800044c <__NVIC_EnableIRQ+0x34>)
 8000432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000436:	095b      	lsrs	r3, r3, #5
 8000438:	2001      	movs	r0, #1
 800043a:	fa00 f202 	lsl.w	r2, r0, r2
 800043e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	e000e100 	.word	0xe000e100

08000450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	6039      	str	r1, [r7, #0]
 800045a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800045c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000460:	2b00      	cmp	r3, #0
 8000462:	db0a      	blt.n	800047a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	b2da      	uxtb	r2, r3
 8000468:	490c      	ldr	r1, [pc, #48]	; (800049c <__NVIC_SetPriority+0x4c>)
 800046a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800046e:	0112      	lsls	r2, r2, #4
 8000470:	b2d2      	uxtb	r2, r2
 8000472:	440b      	add	r3, r1
 8000474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000478:	e00a      	b.n	8000490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	b2da      	uxtb	r2, r3
 800047e:	4908      	ldr	r1, [pc, #32]	; (80004a0 <__NVIC_SetPriority+0x50>)
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	f003 030f 	and.w	r3, r3, #15
 8000486:	3b04      	subs	r3, #4
 8000488:	0112      	lsls	r2, r2, #4
 800048a:	b2d2      	uxtb	r2, r2
 800048c:	440b      	add	r3, r1
 800048e:	761a      	strb	r2, [r3, #24]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000e100 	.word	0xe000e100
 80004a0:	e000ed00 	.word	0xe000ed00

080004a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b089      	sub	sp, #36	; 0x24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f003 0307 	and.w	r3, r3, #7
 80004b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004b8:	69fb      	ldr	r3, [r7, #28]
 80004ba:	f1c3 0307 	rsb	r3, r3, #7
 80004be:	2b04      	cmp	r3, #4
 80004c0:	bf28      	it	cs
 80004c2:	2304      	movcs	r3, #4
 80004c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	3304      	adds	r3, #4
 80004ca:	2b06      	cmp	r3, #6
 80004cc:	d902      	bls.n	80004d4 <NVIC_EncodePriority+0x30>
 80004ce:	69fb      	ldr	r3, [r7, #28]
 80004d0:	3b03      	subs	r3, #3
 80004d2:	e000      	b.n	80004d6 <NVIC_EncodePriority+0x32>
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004dc:	69bb      	ldr	r3, [r7, #24]
 80004de:	fa02 f303 	lsl.w	r3, r2, r3
 80004e2:	43da      	mvns	r2, r3
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	401a      	ands	r2, r3
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	43d9      	mvns	r1, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004fc:	4313      	orrs	r3, r2
         );
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3724      	adds	r7, #36	; 0x24
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3b01      	subs	r3, #1
 8000514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000518:	d301      	bcc.n	800051e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800051a:	2301      	movs	r3, #1
 800051c:	e00f      	b.n	800053e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <SysTick_Config+0x40>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3b01      	subs	r3, #1
 8000524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000526:	210f      	movs	r1, #15
 8000528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800052c:	f7ff ff90 	bl	8000450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <SysTick_Config+0x40>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <SysTick_Config+0x40>)
 8000538:	2207      	movs	r2, #7
 800053a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	e000e010 	.word	0xe000e010

0800054c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff ff2d 	bl	80003b4 <__NVIC_SetPriorityGrouping>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000562:	b580      	push	{r7, lr}
 8000564:	b086      	sub	sp, #24
 8000566:	af00      	add	r7, sp, #0
 8000568:	4603      	mov	r3, r0
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	607a      	str	r2, [r7, #4]
 800056e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000574:	f7ff ff42 	bl	80003fc <__NVIC_GetPriorityGrouping>
 8000578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	68b9      	ldr	r1, [r7, #8]
 800057e:	6978      	ldr	r0, [r7, #20]
 8000580:	f7ff ff90 	bl	80004a4 <NVIC_EncodePriority>
 8000584:	4602      	mov	r2, r0
 8000586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800058a:	4611      	mov	r1, r2
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ff5f 	bl	8000450 <__NVIC_SetPriority>
}
 8000592:	bf00      	nop
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	4603      	mov	r3, r0
 80005a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80005a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ff35 	bl	8000418 <__NVIC_EnableIRQ>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f7ff ffa2 	bl	8000508 <SysTick_Config>
 80005c4:	4603      	mov	r3, r0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b08b      	sub	sp, #44	; 0x2c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005e2:	e169      	b.n	80008b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80005e4:	2201      	movs	r2, #1
 80005e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	69fa      	ldr	r2, [r7, #28]
 80005f4:	4013      	ands	r3, r2
 80005f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80005f8:	69ba      	ldr	r2, [r7, #24]
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	f040 8158 	bne.w	80008b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	4a9a      	ldr	r2, [pc, #616]	; (8000870 <HAL_GPIO_Init+0x2a0>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d05e      	beq.n	80006ca <HAL_GPIO_Init+0xfa>
 800060c:	4a98      	ldr	r2, [pc, #608]	; (8000870 <HAL_GPIO_Init+0x2a0>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d875      	bhi.n	80006fe <HAL_GPIO_Init+0x12e>
 8000612:	4a98      	ldr	r2, [pc, #608]	; (8000874 <HAL_GPIO_Init+0x2a4>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d058      	beq.n	80006ca <HAL_GPIO_Init+0xfa>
 8000618:	4a96      	ldr	r2, [pc, #600]	; (8000874 <HAL_GPIO_Init+0x2a4>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d86f      	bhi.n	80006fe <HAL_GPIO_Init+0x12e>
 800061e:	4a96      	ldr	r2, [pc, #600]	; (8000878 <HAL_GPIO_Init+0x2a8>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d052      	beq.n	80006ca <HAL_GPIO_Init+0xfa>
 8000624:	4a94      	ldr	r2, [pc, #592]	; (8000878 <HAL_GPIO_Init+0x2a8>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d869      	bhi.n	80006fe <HAL_GPIO_Init+0x12e>
 800062a:	4a94      	ldr	r2, [pc, #592]	; (800087c <HAL_GPIO_Init+0x2ac>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d04c      	beq.n	80006ca <HAL_GPIO_Init+0xfa>
 8000630:	4a92      	ldr	r2, [pc, #584]	; (800087c <HAL_GPIO_Init+0x2ac>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d863      	bhi.n	80006fe <HAL_GPIO_Init+0x12e>
 8000636:	4a92      	ldr	r2, [pc, #584]	; (8000880 <HAL_GPIO_Init+0x2b0>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d046      	beq.n	80006ca <HAL_GPIO_Init+0xfa>
 800063c:	4a90      	ldr	r2, [pc, #576]	; (8000880 <HAL_GPIO_Init+0x2b0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d85d      	bhi.n	80006fe <HAL_GPIO_Init+0x12e>
 8000642:	2b12      	cmp	r3, #18
 8000644:	d82a      	bhi.n	800069c <HAL_GPIO_Init+0xcc>
 8000646:	2b12      	cmp	r3, #18
 8000648:	d859      	bhi.n	80006fe <HAL_GPIO_Init+0x12e>
 800064a:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <HAL_GPIO_Init+0x80>)
 800064c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000650:	080006cb 	.word	0x080006cb
 8000654:	080006a5 	.word	0x080006a5
 8000658:	080006b7 	.word	0x080006b7
 800065c:	080006f9 	.word	0x080006f9
 8000660:	080006ff 	.word	0x080006ff
 8000664:	080006ff 	.word	0x080006ff
 8000668:	080006ff 	.word	0x080006ff
 800066c:	080006ff 	.word	0x080006ff
 8000670:	080006ff 	.word	0x080006ff
 8000674:	080006ff 	.word	0x080006ff
 8000678:	080006ff 	.word	0x080006ff
 800067c:	080006ff 	.word	0x080006ff
 8000680:	080006ff 	.word	0x080006ff
 8000684:	080006ff 	.word	0x080006ff
 8000688:	080006ff 	.word	0x080006ff
 800068c:	080006ff 	.word	0x080006ff
 8000690:	080006ff 	.word	0x080006ff
 8000694:	080006ad 	.word	0x080006ad
 8000698:	080006c1 	.word	0x080006c1
 800069c:	4a79      	ldr	r2, [pc, #484]	; (8000884 <HAL_GPIO_Init+0x2b4>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d013      	beq.n	80006ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80006a2:	e02c      	b.n	80006fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	623b      	str	r3, [r7, #32]
          break;
 80006aa:	e029      	b.n	8000700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	3304      	adds	r3, #4
 80006b2:	623b      	str	r3, [r7, #32]
          break;
 80006b4:	e024      	b.n	8000700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	68db      	ldr	r3, [r3, #12]
 80006ba:	3308      	adds	r3, #8
 80006bc:	623b      	str	r3, [r7, #32]
          break;
 80006be:	e01f      	b.n	8000700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	330c      	adds	r3, #12
 80006c6:	623b      	str	r3, [r7, #32]
          break;
 80006c8:	e01a      	b.n	8000700 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d102      	bne.n	80006d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006d2:	2304      	movs	r3, #4
 80006d4:	623b      	str	r3, [r7, #32]
          break;
 80006d6:	e013      	b.n	8000700 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d105      	bne.n	80006ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006e0:	2308      	movs	r3, #8
 80006e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	69fa      	ldr	r2, [r7, #28]
 80006e8:	611a      	str	r2, [r3, #16]
          break;
 80006ea:	e009      	b.n	8000700 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006ec:	2308      	movs	r3, #8
 80006ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	69fa      	ldr	r2, [r7, #28]
 80006f4:	615a      	str	r2, [r3, #20]
          break;
 80006f6:	e003      	b.n	8000700 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
          break;
 80006fc:	e000      	b.n	8000700 <HAL_GPIO_Init+0x130>
          break;
 80006fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	2bff      	cmp	r3, #255	; 0xff
 8000704:	d801      	bhi.n	800070a <HAL_GPIO_Init+0x13a>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	e001      	b.n	800070e <HAL_GPIO_Init+0x13e>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3304      	adds	r3, #4
 800070e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	2bff      	cmp	r3, #255	; 0xff
 8000714:	d802      	bhi.n	800071c <HAL_GPIO_Init+0x14c>
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	e002      	b.n	8000722 <HAL_GPIO_Init+0x152>
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	3b08      	subs	r3, #8
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	210f      	movs	r1, #15
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	fa01 f303 	lsl.w	r3, r1, r3
 8000730:	43db      	mvns	r3, r3
 8000732:	401a      	ands	r2, r3
 8000734:	6a39      	ldr	r1, [r7, #32]
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	fa01 f303 	lsl.w	r3, r1, r3
 800073c:	431a      	orrs	r2, r3
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	2b00      	cmp	r3, #0
 800074c:	f000 80b1 	beq.w	80008b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000750:	4b4d      	ldr	r3, [pc, #308]	; (8000888 <HAL_GPIO_Init+0x2b8>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a4c      	ldr	r2, [pc, #304]	; (8000888 <HAL_GPIO_Init+0x2b8>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b4a      	ldr	r3, [pc, #296]	; (8000888 <HAL_GPIO_Init+0x2b8>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000768:	4a48      	ldr	r2, [pc, #288]	; (800088c <HAL_GPIO_Init+0x2bc>)
 800076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	3302      	adds	r3, #2
 8000770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000774:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	f003 0303 	and.w	r3, r3, #3
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	220f      	movs	r2, #15
 8000780:	fa02 f303 	lsl.w	r3, r2, r3
 8000784:	43db      	mvns	r3, r3
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	4013      	ands	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a40      	ldr	r2, [pc, #256]	; (8000890 <HAL_GPIO_Init+0x2c0>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d013      	beq.n	80007bc <HAL_GPIO_Init+0x1ec>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a3f      	ldr	r2, [pc, #252]	; (8000894 <HAL_GPIO_Init+0x2c4>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d00d      	beq.n	80007b8 <HAL_GPIO_Init+0x1e8>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a3e      	ldr	r2, [pc, #248]	; (8000898 <HAL_GPIO_Init+0x2c8>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d007      	beq.n	80007b4 <HAL_GPIO_Init+0x1e4>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a3d      	ldr	r2, [pc, #244]	; (800089c <HAL_GPIO_Init+0x2cc>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d101      	bne.n	80007b0 <HAL_GPIO_Init+0x1e0>
 80007ac:	2303      	movs	r3, #3
 80007ae:	e006      	b.n	80007be <HAL_GPIO_Init+0x1ee>
 80007b0:	2304      	movs	r3, #4
 80007b2:	e004      	b.n	80007be <HAL_GPIO_Init+0x1ee>
 80007b4:	2302      	movs	r3, #2
 80007b6:	e002      	b.n	80007be <HAL_GPIO_Init+0x1ee>
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <HAL_GPIO_Init+0x1ee>
 80007bc:	2300      	movs	r3, #0
 80007be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007c0:	f002 0203 	and.w	r2, r2, #3
 80007c4:	0092      	lsls	r2, r2, #2
 80007c6:	4093      	lsls	r3, r2
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80007ce:	492f      	ldr	r1, [pc, #188]	; (800088c <HAL_GPIO_Init+0x2bc>)
 80007d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	3302      	adds	r3, #2
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d006      	beq.n	80007f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80007e8:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	492c      	ldr	r1, [pc, #176]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	600b      	str	r3, [r1, #0]
 80007f4:	e006      	b.n	8000804 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	43db      	mvns	r3, r3
 80007fe:	4928      	ldr	r1, [pc, #160]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 8000800:	4013      	ands	r3, r2
 8000802:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080c:	2b00      	cmp	r3, #0
 800080e:	d006      	beq.n	800081e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	4922      	ldr	r1, [pc, #136]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	4313      	orrs	r3, r2
 800081a:	604b      	str	r3, [r1, #4]
 800081c:	e006      	b.n	800082c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	43db      	mvns	r3, r3
 8000826:	491e      	ldr	r1, [pc, #120]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 8000828:	4013      	ands	r3, r2
 800082a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000834:	2b00      	cmp	r3, #0
 8000836:	d006      	beq.n	8000846 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 800083a:	689a      	ldr	r2, [r3, #8]
 800083c:	4918      	ldr	r1, [pc, #96]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	4313      	orrs	r3, r2
 8000842:	608b      	str	r3, [r1, #8]
 8000844:	e006      	b.n	8000854 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	69bb      	ldr	r3, [r7, #24]
 800084c:	43db      	mvns	r3, r3
 800084e:	4914      	ldr	r1, [pc, #80]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 8000850:	4013      	ands	r3, r2
 8000852:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d021      	beq.n	80008a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 8000862:	68da      	ldr	r2, [r3, #12]
 8000864:	490e      	ldr	r1, [pc, #56]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	4313      	orrs	r3, r2
 800086a:	60cb      	str	r3, [r1, #12]
 800086c:	e021      	b.n	80008b2 <HAL_GPIO_Init+0x2e2>
 800086e:	bf00      	nop
 8000870:	10320000 	.word	0x10320000
 8000874:	10310000 	.word	0x10310000
 8000878:	10220000 	.word	0x10220000
 800087c:	10210000 	.word	0x10210000
 8000880:	10120000 	.word	0x10120000
 8000884:	10110000 	.word	0x10110000
 8000888:	40021000 	.word	0x40021000
 800088c:	40010000 	.word	0x40010000
 8000890:	40010800 	.word	0x40010800
 8000894:	40010c00 	.word	0x40010c00
 8000898:	40011000 	.word	0x40011000
 800089c:	40011400 	.word	0x40011400
 80008a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_GPIO_Init+0x304>)
 80008a6:	68da      	ldr	r2, [r3, #12]
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4909      	ldr	r1, [pc, #36]	; (80008d4 <HAL_GPIO_Init+0x304>)
 80008ae:	4013      	ands	r3, r2
 80008b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80008b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b4:	3301      	adds	r3, #1
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008be:	fa22 f303 	lsr.w	r3, r2, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f47f ae8e 	bne.w	80005e4 <HAL_GPIO_Init+0x14>
  }
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	372c      	adds	r7, #44	; 0x2c
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	40010400 	.word	0x40010400

080008d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80008dc:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	20000000 	.word	0x20000000

080008ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80008f0:	f7ff fff2 	bl	80008d8 <HAL_RCC_GetHCLKFreq>
 80008f4:	4602      	mov	r2, r0
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_RCC_GetPCLK1Freq+0x20>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	f003 0307 	and.w	r3, r3, #7
 8000900:	4903      	ldr	r1, [pc, #12]	; (8000910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000902:	5ccb      	ldrb	r3, [r1, r3]
 8000904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000908:	4618      	mov	r0, r3
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	08000d1c 	.word	0x08000d1c

08000914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000918:	f7ff ffde 	bl	80008d8 <HAL_RCC_GetHCLKFreq>
 800091c:	4602      	mov	r2, r0
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	0adb      	lsrs	r3, r3, #11
 8000924:	f003 0307 	and.w	r3, r3, #7
 8000928:	4903      	ldr	r1, [pc, #12]	; (8000938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800092a:	5ccb      	ldrb	r3, [r1, r3]
 800092c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000930:	4618      	mov	r0, r3
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40021000 	.word	0x40021000
 8000938:	08000d1c 	.word	0x08000d1c

0800093c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e03f      	b.n	80009ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d106      	bne.n	8000968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fc68 	bl	8000238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2224      	movs	r2, #36	; 0x24
 800096c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	68da      	ldr	r2, [r3, #12]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800097e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f000 f905 	bl	8000b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	691a      	ldr	r2, [r3, #16]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	695a      	ldr	r2, [r3, #20]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80009a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	68da      	ldr	r2, [r3, #12]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2220      	movs	r2, #32
 80009c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2220      	movs	r2, #32
 80009c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b08a      	sub	sp, #40	; 0x28
 80009da:	af02      	add	r7, sp, #8
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4613      	mov	r3, r2
 80009e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b20      	cmp	r3, #32
 80009f4:	d17c      	bne.n	8000af0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <HAL_UART_Transmit+0x2c>
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d101      	bne.n	8000a06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e075      	b.n	8000af2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d101      	bne.n	8000a14 <HAL_UART_Transmit+0x3e>
 8000a10:	2302      	movs	r3, #2
 8000a12:	e06e      	b.n	8000af2 <HAL_UART_Transmit+0x11c>
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2201      	movs	r2, #1
 8000a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2221      	movs	r2, #33	; 0x21
 8000a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000a2a:	f7ff fcb9 	bl	80003a0 <HAL_GetTick>
 8000a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	88fa      	ldrh	r2, [r7, #6]
 8000a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	88fa      	ldrh	r2, [r7, #6]
 8000a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a44:	d108      	bne.n	8000a58 <HAL_UART_Transmit+0x82>
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	691b      	ldr	r3, [r3, #16]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d104      	bne.n	8000a58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	e003      	b.n	8000a60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8000a68:	e02a      	b.n	8000ac0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	2200      	movs	r2, #0
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f000 f840 	bl	8000afa <UART_WaitOnFlagUntilTimeout>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8000a80:	2303      	movs	r3, #3
 8000a82:	e036      	b.n	8000af2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d10b      	bne.n	8000aa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
 8000aa0:	e007      	b.n	8000ab2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1cf      	bne.n	8000a6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2140      	movs	r1, #64	; 0x40
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f000 f810 	bl	8000afa <UART_WaitOnFlagUntilTimeout>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	e006      	b.n	8000af2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	e000      	b.n	8000af2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8000af0:	2302      	movs	r3, #2
  }
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4613      	mov	r3, r2
 8000b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000b0a:	e02c      	b.n	8000b66 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b12:	d028      	beq.n	8000b66 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8000b1a:	f7ff fc41 	bl	80003a0 <HAL_GetTick>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d21d      	bcs.n	8000b66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000b38:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	695a      	ldr	r2, [r3, #20]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 0201 	bic.w	r2, r2, #1
 8000b48:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2220      	movs	r2, #32
 8000b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2220      	movs	r2, #32
 8000b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000b62:	2303      	movs	r3, #3
 8000b64:	e00f      	b.n	8000b86 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	68ba      	ldr	r2, [r7, #8]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	bf0c      	ite	eq
 8000b76:	2301      	moveq	r3, #1
 8000b78:	2300      	movne	r3, #0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d0c3      	beq.n	8000b0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68da      	ldr	r2, [r3, #12]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	430a      	orrs	r2, r1
 8000bac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000bca:	f023 030c 	bic.w	r3, r3, #12
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	68b9      	ldr	r1, [r7, #8]
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	699a      	ldr	r2, [r3, #24]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a2c      	ldr	r2, [pc, #176]	; (8000ca4 <UART_SetConfig+0x114>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d103      	bne.n	8000c00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000bf8:	f7ff fe8c 	bl	8000914 <HAL_RCC_GetPCLK2Freq>
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	e002      	b.n	8000c06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8000c00:	f7ff fe74 	bl	80008ec <HAL_RCC_GetPCLK1Freq>
 8000c04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	009a      	lsls	r2, r3, #2
 8000c10:	441a      	add	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1c:	4a22      	ldr	r2, [pc, #136]	; (8000ca8 <UART_SetConfig+0x118>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	0119      	lsls	r1, r3, #4
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	009a      	lsls	r2, r3, #2
 8000c30:	441a      	add	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <UART_SetConfig+0x118>)
 8000c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	2064      	movs	r0, #100	; 0x64
 8000c46:	fb00 f303 	mul.w	r3, r0, r3
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	3332      	adds	r3, #50	; 0x32
 8000c50:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <UART_SetConfig+0x118>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c5c:	4419      	add	r1, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	009a      	lsls	r2, r3, #2
 8000c68:	441a      	add	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <UART_SetConfig+0x118>)
 8000c76:	fba3 0302 	umull	r0, r3, r3, r2
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	2064      	movs	r0, #100	; 0x64
 8000c7e:	fb00 f303 	mul.w	r3, r0, r3
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	011b      	lsls	r3, r3, #4
 8000c86:	3332      	adds	r3, #50	; 0x32
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <UART_SetConfig+0x118>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	f003 020f 	and.w	r2, r3, #15
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	440a      	add	r2, r1
 8000c9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40013800 	.word	0x40013800
 8000ca8:	51eb851f 	.word	0x51eb851f

08000cac <__libc_init_array>:
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4d0c      	ldr	r5, [pc, #48]	; (8000ce4 <__libc_init_array+0x38>)
 8000cb2:	4c0d      	ldr	r4, [pc, #52]	; (8000ce8 <__libc_init_array+0x3c>)
 8000cb4:	1b64      	subs	r4, r4, r5
 8000cb6:	10a4      	asrs	r4, r4, #2
 8000cb8:	42a6      	cmp	r6, r4
 8000cba:	d109      	bne.n	8000cd0 <__libc_init_array+0x24>
 8000cbc:	f000 f81a 	bl	8000cf4 <_init>
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	4d0a      	ldr	r5, [pc, #40]	; (8000cec <__libc_init_array+0x40>)
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	; (8000cf0 <__libc_init_array+0x44>)
 8000cc6:	1b64      	subs	r4, r4, r5
 8000cc8:	10a4      	asrs	r4, r4, #2
 8000cca:	42a6      	cmp	r6, r4
 8000ccc:	d105      	bne.n	8000cda <__libc_init_array+0x2e>
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
 8000cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd4:	4798      	blx	r3
 8000cd6:	3601      	adds	r6, #1
 8000cd8:	e7ee      	b.n	8000cb8 <__libc_init_array+0xc>
 8000cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cde:	4798      	blx	r3
 8000ce0:	3601      	adds	r6, #1
 8000ce2:	e7f2      	b.n	8000cca <__libc_init_array+0x1e>
 8000ce4:	08000d24 	.word	0x08000d24
 8000ce8:	08000d24 	.word	0x08000d24
 8000cec:	08000d24 	.word	0x08000d24
 8000cf0:	08000d28 	.word	0x08000d28

08000cf4 <_init>:
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	bf00      	nop
 8000cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cfa:	bc08      	pop	{r3}
 8000cfc:	469e      	mov	lr, r3
 8000cfe:	4770      	bx	lr

08000d00 <_fini>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	bf00      	nop
 8000d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d06:	bc08      	pop	{r3}
 8000d08:	469e      	mov	lr, r3
 8000d0a:	4770      	bx	lr
